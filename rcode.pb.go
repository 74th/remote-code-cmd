// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcode.proto

package rcode

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LaunchRequest struct {
	RemoteHost           string   `protobuf:"bytes,1,opt,name=remote_host,json=remoteHost,proto3" json:"remote_host,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaunchRequest) Reset()         { *m = LaunchRequest{} }
func (m *LaunchRequest) String() string { return proto.CompactTextString(m) }
func (*LaunchRequest) ProtoMessage()    {}
func (*LaunchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_53f2649a4c15e42c, []int{0}
}

func (m *LaunchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaunchRequest.Unmarshal(m, b)
}
func (m *LaunchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaunchRequest.Marshal(b, m, deterministic)
}
func (m *LaunchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchRequest.Merge(m, src)
}
func (m *LaunchRequest) XXX_Size() int {
	return xxx_messageInfo_LaunchRequest.Size(m)
}
func (m *LaunchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchRequest proto.InternalMessageInfo

func (m *LaunchRequest) GetRemoteHost() string {
	if m != nil {
		return m.RemoteHost
	}
	return ""
}

func (m *LaunchRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type LaunchResponse struct {
	ReturnCode           int32    `protobuf:"varint,3,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaunchResponse) Reset()         { *m = LaunchResponse{} }
func (m *LaunchResponse) String() string { return proto.CompactTextString(m) }
func (*LaunchResponse) ProtoMessage()    {}
func (*LaunchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53f2649a4c15e42c, []int{1}
}

func (m *LaunchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaunchResponse.Unmarshal(m, b)
}
func (m *LaunchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaunchResponse.Marshal(b, m, deterministic)
}
func (m *LaunchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchResponse.Merge(m, src)
}
func (m *LaunchResponse) XXX_Size() int {
	return xxx_messageInfo_LaunchResponse.Size(m)
}
func (m *LaunchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchResponse proto.InternalMessageInfo

func (m *LaunchResponse) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *LaunchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*LaunchRequest)(nil), "LaunchRequest")
	proto.RegisterType((*LaunchResponse)(nil), "LaunchResponse")
}

func init() { proto.RegisterFile("rcode.proto", fileDescriptor_53f2649a4c15e42c) }

var fileDescriptor_53f2649a4c15e42c = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x0e, 0x82, 0x40,
	0x0c, 0x86, 0x05, 0x44, 0x43, 0x89, 0x98, 0xdc, 0x74, 0x71, 0x91, 0x30, 0x31, 0x61, 0xa2, 0x8b,
	0xbb, 0x0e, 0x26, 0x3a, 0xdd, 0x0b, 0x10, 0x84, 0x06, 0x16, 0x28, 0x5e, 0x8f, 0xf7, 0x37, 0x77,
	0x84, 0x81, 0xad, 0xfd, 0x93, 0xff, 0xfb, 0x5a, 0x88, 0x75, 0x4d, 0x0d, 0x16, 0xa3, 0x26, 0x43,
	0xd9, 0x13, 0x0e, 0x9f, 0x6a, 0x1a, 0xea, 0x4e, 0xe1, 0x6f, 0x42, 0x36, 0xe2, 0x0c, 0xb1, 0xc6,
	0x9e, 0x0c, 0x96, 0x1d, 0xb1, 0x91, 0x5e, 0xea, 0xe5, 0x91, 0x82, 0x39, 0x7a, 0x11, 0x1b, 0x21,
	0x60, 0x5b, 0xe9, 0x96, 0xa5, 0x9f, 0x06, 0x79, 0xa4, 0xdc, 0x9c, 0xbd, 0x21, 0x59, 0x28, 0x3c,
	0xd2, 0xc0, 0x38, 0x63, 0xcc, 0xa4, 0x87, 0xd2, 0xca, 0x64, 0x90, 0x7a, 0x79, 0x68, 0x31, 0x36,
	0x7a, 0x50, 0x83, 0x42, 0xc2, 0xbe, 0x47, 0xe6, 0xaa, 0x45, 0xe9, 0x3b, 0xc7, 0xb2, 0x5e, 0xef,
	0x10, 0x2a, 0x5b, 0x12, 0x17, 0x80, 0x99, 0xea, 0x0a, 0x49, 0xb1, 0x3a, 0xf4, 0x74, 0x2c, 0xd6,
	0xca, 0x6c, 0xf3, 0xdd, 0xb9, 0x9f, 0x6e, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x9e, 0x91,
	0x6b, 0xe2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RcodeClient is the client API for Rcode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RcodeClient interface {
	LaunchCode(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
}

type rcodeClient struct {
	cc *grpc.ClientConn
}

func NewRcodeClient(cc *grpc.ClientConn) RcodeClient {
	return &rcodeClient{cc}
}

func (c *rcodeClient) LaunchCode(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, "/Rcode/LaunchCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RcodeServer is the server API for Rcode service.
type RcodeServer interface {
	LaunchCode(context.Context, *LaunchRequest) (*LaunchResponse, error)
}

// UnimplementedRcodeServer can be embedded to have forward compatible implementations.
type UnimplementedRcodeServer struct {
}

func (*UnimplementedRcodeServer) LaunchCode(ctx context.Context, req *LaunchRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchCode not implemented")
}

func RegisterRcodeServer(s *grpc.Server, srv RcodeServer) {
	s.RegisterService(&_Rcode_serviceDesc, srv)
}

func _Rcode_LaunchCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RcodeServer).LaunchCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rcode/LaunchCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RcodeServer).LaunchCode(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rcode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Rcode",
	HandlerType: (*RcodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchCode",
			Handler:    _Rcode_LaunchCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rcode.proto",
}
